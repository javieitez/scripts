#!/bin/bash

# Quick and dirty script to send a SQL query to an MS SQL DB and parse the output
#
# Author: JA Vieitez https://github.com/javieitez
#
# Requires sqlcmd https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver16

# Path to the sqlcmd executable
SQLCMD_PATH="/opt/mssql-tools/bin"
############# THE SQL QUERY ############# 
MSSQLQUERY="SELECT
    counter_name,
    cntr_value
FROM
    sys.dm_os_performance_counters
WHERE
    object_name LIKE '%Buffer Manager%'
    AND counter_name IN ('Page reads/sec', 'Page writes/sec');"
#############  #############  ############ 
PAGEREADSLIMIT='750000'

if [ $1 == '-h' ]
	then
		echo "Usage:  check_sqlcmd.sh -S SERVER -d DATABASE -U USER -P PASSWORD"
		echo ""
		echo "Example: check_sqlcmd.sh -S 10.10.10.10 -d MYDATABASE -U sa -P 1234 -Q \"SELECT name FROM sys.databases\""
		exit 3
fi

#just for debug
#echo "parameters are $1 $2 $3 $4 $5 $6 $7 $8 $9" 

# just pass all the parameters with the query at the end
SQLOUTPUT=$($SQLCMD_PATH/sqlcmd $1 "$2" $3 "$4" $5 "$6" $7 "$8" -Q "$MSSQLQUERY")
#capture the exit code for later determining if the connection was successful
LASTEXITCODE=$? 

#Extract the reads value to a var
PAGEREADS=$(echo "$SQLOUTPUT" | grep "Page reads" | awk '{print $3}')

if [ $LASTEXITCODE == 0 ] 
	then
		# Connection successful
		echo "Connected to $8"
		echo "$PAGEREADS Page Reads"
	else
		echo "CRITICAL - could no connect to $8"
		exit 2
fi

if  [[ "$PAGEREADS" -ge "$PAGEREADSLIMIT" ]]
	then
		echo "CRITICAL - Above the limit of $PAGEREADSLIMIT Page Reads"
		exit 2
	else
		echo "OK - Below the limit of $PAGEREADSLIMIT Page Reads"
		exit 0
fi 
